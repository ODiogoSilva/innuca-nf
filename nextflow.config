//                   USER DEFINED PARAMETERS FOR INNUCA PIPELINE             //
///////////////////////////////////////////////////////////////////////////////
params {

    // GENERAL PARAMS //
    // Path and expression for paired-end FastQ files
    fastq = "data/*_{1,2}.*"
    // Genome size estimate for samples
    genomeSize = 2.1
    // Minimum coverage
    minCoverage = 15

    // FASTQC //
    // Adapters file path
    adapters = 'None'

    // TRIMMOMATIC //
    // Perform a sliding window trimming, cutting once the average quality
    // within the window falls below a threshold
    trimSlidingWindow = '5:20'
    // Cut bases off the start of a read, if below a threshold quality
    trimLeading = '3'
    // Cut bases off the end of a read, if below a threshold quality
    trimTrailing = '3'
    // Drop the read if it is below a specified length
    trimMinLength = '55'

    // SPADES //
    // The minimum number of reads to consider an edge in the de Bruijn
    // graph during the assembly.
    spadesMinCoverage = 2
    // Minimum contigs K-mer coverage. After assembly only keep contigs with
    // reported k-mer coverage equal or above this value
    spadesMinKmerCoverage = 2
    // If 'auto' the SPAdes k-mer lengths will be determined from the maximum
    // read length of each assembly. If 'default', SPAdes will use the default
    // k-mer lengths. Otherwise, specify the k-mer lengths manually like:
    // '55 77 99 113 127'
    spadesKmers = 'auto'
    // Filter SPAdes contigs for length greater or equal than this value
    spadesMinContigLen = 200
    // Maximum number of contigs per 1.5 Mb of expected genome size
    spadesMaxContigs = 100

    // ASSEMBLY MAPPING //
    // In auto, the default minimum coverage for each assembled contig is
    // 1/3 of the assembly mean coverage or 10x, if the mean coverage is below
    // 10x.
    minAssemblyCoverage = 'auto'

    // RUN TIME OPTIONS //
    // Specify at which point (process) the pipeline should end. This can
    // be useful when testing some part of the pipeline without running it
    // completely. Leave empty to run the entire pipeline
    stopAt = ""

    // POST ASSEMBLY OPTIONS //
    // The following options are for post assembly processing

    // Master controller for annotation runs
    // This option controls whether the mlst, abricate and prokka process will
    // run. If it is set to false, they will not run even if the individual
    // run options are set to true
    annotationRun = true

    // MLST
    mlstRun = true

    // ABRICATE
    abricateRun = true
    // Database options: "argannot" "card" "ncbi" "ncbibetalactamase" "plasmidfinder" "resfinder" "vfdb"
    abricateDatabases =  ["resfinder", "card", "vfdb"]

    // PROKKA
    prokkaRun = true

    // CHEWBBACA
    chewbbacaRun = true
    schema_path = "data/schema_seed"

}

process {

    echo = true

    // DOCKER CONTAINERS //
    $fastqc.container = 'ummidock/fastqc:0.11.5'
    $fastqc2.container = 'ummidock/fastqc:0.11.5'
    $trimmomatic.container = 'ummidock/trimmomatic:0.36'
    $spades.container = 'ummidock/spades:3.11.0'
    $assembly_mapping.container = 'ummidock/bowtie2_samtools:latest'
    $assembly_mapping_coverage.container = 'ummidock/bowtie2_samtools:latest'
    $process_assembly_mapping.container = 'ummidock/bowtie2_samtools:latest'
    $pilon.container = 'ummidock/pilon:1.22'
    $mlst.container = 'ummidock/mlst:latest'
    $abricate.container = 'ummidock/abricate:latest'
    $prokka.container = 'ummidock/prokka:1.12'
    $chewbbaca.container = 'ummidock/chewbbaca:py3'

    $trimmomatic.memory = "4GB"
    $pilon.memory = "7GB"

}

executor {
  $local {
      cpus = 4
  }
}

//                             PROFILE OPTIONS                               //
///////////////////////////////////////////////////////////////////////////////

profiles {

    // DEFAULT profile for local execution (for desktop/laptops or servers
    // without distributed computing environments)
    standard {

        docker.enabled = true

        process {

            // CPU USAGE PER PROCESS //
            $fastqc.cpus = 2
            $trimmomatic.cpus = 2
            $spades.cpus = 2
            $assembly_mapping.cpus = 2
            $pilon.cpus = 2
            $prokka.cpus = 2
            $chewbbaca.cpus = 3

        }

    }

    // SINGULARITY PROFILE
    // Specify this profile to use singularity engine instead of docker
    sing {

        singularity.enabled = true

        // Replace container destination for singularity images
        process.$fastqc.container = 'docker://odiogosilva/fastqc:0.11.5'
        process.$fastqc2.container = 'docker://odiogosilva/fastqc:0.11.5'
        process.$trimmomatic.container = 'docker://odiogosilva/trimmomatic'
        process.$spades.container = 'docker://odiogosilva/spades:3.11.0'
        process.$assembly_mapping.container = 'docker://odiogosilva/bowtie2_samtools'
        process.$assembly_mapping_coverage.container = 'docker://odiogosilva/bowtie2_samtools'
        process.$process_assembly_mapping.container = 'docker://odiogosilva/bowtie2_samtools'
        process.$pilon.container = 'docker://odiogosilva/pilon:1.22'
        process.$mlst.container = 'docker://odiogosilva/mlst'
        process.$abricate.container = 'docker://ummidock/abricate:latest'
        process.$prokka.container = 'docker://ummidock/prokka:1.12'
    }

    // SLURM PROFILE
    slurm {

        // Change executor for SLURM
        process.executor = "slurm"
        // Change container engine for Shifter
        shifter.enabled = true

        process {

            // Use scratch for these processes
            $spades.scratch = true
            $assembly_mapping.scratch = true

            // CPU USAGE PER PROCESS //
            $fastqc.cpus = 2
            $trimmomatic.cpus = 4
            $spades.cpus = 4
            $assembly_mapping.cpus = 6
            $pilon.cpus = 8
            $prokka.cpus = 4
            $chewbbaca.cpus = 40

            // MEMORY USAGE PER PROCESS //
            // general memory usage
            memory = "4GB"

            // Process specific memory usage
            $spades.memory = "10GB"
            $trimmomatic.memory = "10GB"
            $pilon.memory = "8GB"

        }

    }

}

manifest {
    homePage = 'https://github.com/ODiogoSilva/innuca-nf'
    description = 'A nextflow implementation of INNUENDO quality control of reads, de novo assembly and contigs quality assessment, and possible contamination search'
    mainScript = 'innuca.nf'
}